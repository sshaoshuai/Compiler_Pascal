word_list: 409
************Lexico Analyze Complete!************

identifier_list -> id   (36,first)
identifier_list -> identifier_list , id   (36,second) (52,(null))
identifier_list -> id   (36,hha)
identifier_list -> identifier_list , id   (36,i) (52,(null))
identifier_list -> identifier_list , id   (36,j) (52,(null))
identifier_list -> identifier_list , id   (36,k) (52,(null))
identifier_list -> identifier_list , id   (36,p) (52,(null))
identifier_list -> identifier_list , id   (36,tot) (52,(null))
identifier_list -> identifier_list , id   (36,n) (52,(null))
identifier_list -> identifier_list , id   (36,t) (52,(null))
identifier_list -> identifier_list , id   (36,m) (52,(null))
identifier_list -> identifier_list , id   (36,rr) (52,(null))
standard_type -> real   (65,real)
type -> standard_type
declaration -> identifier_list : type   (56,(null))


identifier_list -> id   (36,jl)
identifier_list -> identifier_list , id   (36,ss) (52,(null))

ProgM -> @
identifier_list -> id   (36,now)
identifier_list -> identifier_list , id   (36,he) (52,(null))
standard_type -> integer   (64,integer)
type -> standard_type
declaration -> identifier_list : type   (56,(null))

identifier_list -> id   (36,last)
identifier_list -> identifier_list , id   (36,she) (52,(null))
standard_type -> real   (65,real)
type -> standard_type
declaration -> declaration semi identifier_list : type   (56,(null)) (58,(null))

type -> record ProgM declaration end   (10,end) (26,record)

declaration -> declaration semi identifier_list : type   (56,(null)) (58,(null))



identifier_list -> id   (36,l)
identifier_list -> identifier_list , id   (36,w) (52,(null))
standard_type -> integer   (64,integer)
type -> array [ digits .. digits ] of standard_type   (21,of) (62,(null)) (37,5006) (55,(null)) (37,1) (61,(null)) (2,array)
declaration -> declaration semi identifier_list : type   (56,(null)) (58,(null))
identifier_list -> id   (36,f)
standard_type -> integer   (64,integer)
type -> array [ digits .. digits ] of standard_type   (21,of) (62,(null)) (37,5006) (55,(null)) (37,0) (61,(null)) (2,array)
declaration -> declaration semi identifier_list : type   (56,(null)) (58,(null))
declarations -> var declaration semi   (58,(null)) (33,Var)
subprogram_declarations -> @
ProgM -> @
identifier_list -> id   (36,a)
identifier_list -> identifier_list , id   (36,b) (52,(null))
standard_type -> integer   (64,integer)
type -> standard_type
parameter_list -> identifier_list : type   (56,(null))
arguments -> ( parameter_list )   (51,(null)) (50,(null))
standard_type -> integer   (64,integer)
subprogram_head -> function id arguments : standard_type semi   (58,(null)) (56,(null)) (36,max) (13,Function)
declarations -> @
factor -> id   (36,a)
term -> factor
simple_expression -> term
relop -> >   (46,(null))
factor -> id   (36,b)
term -> factor
simple_expression -> term
expression -> simple_expression relop simple_expression
factor -> ( expression )   (51,(null)) (50,(null))
term -> factor
simple_expression -> term
expression -> simple_expression
M -> @
factor -> id   (36,a)
term -> factor
simple_expression -> term
expression -> simple_expression
expression_list -> expression
procedure_statement -> id ( expression_list )   (51,(null)) (50,(null)) (36,return)
statement -> procedure_statement
N -> @
M -> @
procedure_statement -> id   (36,pass)
statement -> procedure_statement
statement -> if expression then M statement N else M statement   (9,else) (29,then) (15,if)
statement_list -> statement
M -> @
factor -> id   (36,b)
term -> factor
simple_expression -> term
expression -> simple_expression
expression_list -> expression
procedure_statement -> id ( expression_list )   (51,(null)) (50,(null)) (36,return)
statement -> procedure_statement
statement_list -> statement_list semi M statement   (58,(null))
optional_statements -> statement_list
compound_statement -> begin optional_statements end   (10,end) (3,begin)
subprogram_declaration -> ProgM subprogram_head declarations compound_statement
subprogram_declarations -> subprogram_declarations subprogram_declaration semi   (58,(null))
ProgM -> @
identifier_list -> id   (36,ll)
identifier_list -> identifier_list , id   (36,rr) (52,(null))
standard_type -> integer   (64,integer)
type -> standard_type
parameter_list -> identifier_list : type   (56,(null))
arguments -> ( parameter_list )   (51,(null)) (50,(null))
subprogram_head -> procedure id arguments semi   (58,(null)) (36,qsort) (24,Procedure)
identifier_list -> id   (36,mid)
identifier_list -> identifier_list , id   (36,t) (52,(null))
identifier_list -> identifier_list , id   (36,i) (52,(null))
identifier_list -> identifier_list , id   (36,j) (52,(null))
identifier_list -> identifier_list , id   (36,mid2) (52,(null))
identifier_list -> identifier_list , id   (36,l) (52,(null))
identifier_list -> identifier_list , id   (36,tot) (52,(null))
identifier_list -> identifier_list , id   (36,k) (52,(null))
identifier_list -> identifier_list , id   (36,m) (52,(null))
standard_type -> integer   (64,integer)
type -> standard_type
declaration -> identifier_list : type   (56,(null))
declarations -> var declaration semi   (58,(null)) (33,var)
variable -> id   (36,i)
assignop -> :=   (57,(null))
factor -> id   (36,ll)
term -> factor
simple_expression -> term
expression -> simple_expression
statement -> variable assignop expression
statement_list -> statement
M -> @
variable -> id   (36,j)
assignop -> :=   (57,(null))
factor -> id   (36,rr)
term -> factor
simple_expression -> term
expression -> simple_expression
statement -> variable assignop expression
statement_list -> statement_list semi M statement   (58,(null))
M -> @
variable -> id   (36,mid)
assignop -> :=   (57,(null))
factor -> id   (36,l)
term -> factor
simple_expression -> term
expression -> simple_expression
statement -> variable assignop expression
statement_list -> statement_list semi M statement   (58,(null))
M -> @
M -> @
factor -> id   (36,i)
term -> factor
simple_expression -> term
relop -> <   (45,(null))
factor -> id   (36,mid)
term -> factor
simple_expression -> term
expression -> simple_expression relop simple_expression
factor -> ( expression )   (51,(null)) (50,(null))
term -> factor
simple_expression -> term
expression -> simple_expression
M -> @
factor -> id   (36,i)
term -> factor
simple_expression -> term
expression -> simple_expression
expression_list -> expression
procedure_statement -> id ( expression_list )   (51,(null)) (50,(null)) (36,inc)
statement -> procedure_statement
statement -> while M expression do M statement   (7,do) (34,while)
statement_list -> statement_list semi M statement   (58,(null))
M -> @
M -> @
factor -> id   (36,j)
term -> factor
simple_expression -> term
relop -> >   (46,(null))
factor -> id   (36,mid)
term -> factor
simple_expression -> term
expression -> simple_expression relop simple_expression
factor -> ( expression )   (51,(null)) (50,(null))
term -> factor
simple_expression -> term
expression -> simple_expression
M -> @
factor -> id   (36,j)
term -> factor
simple_expression -> term
expression -> simple_expression
expression_list -> expression
procedure_statement -> id ( expression_list )   (51,(null)) (50,(null)) (36,dec)
statement -> procedure_statement
statement -> while M expression do M statement   (7,do) (34,while)
statement_list -> statement_list semi M statement   (58,(null))
M -> @
factor -> id   (36,i)
term -> factor
simple_expression -> term
relop -> <   (45,(null))
factor -> id   (36,j)
term -> factor
simple_expression -> term
expression -> simple_expression relop simple_expression
M -> @
variable -> id   (36,t)
assignop -> :=   (57,(null))
factor -> id   (36,l)
term -> factor
simple_expression -> term
expression -> simple_expression
statement -> variable assignop expression
statement_list -> statement
M -> @
variable -> id   (36,l)
assignop -> :=   (57,(null))
factor -> id   (36,l)
term -> factor
simple_expression -> term
expression -> simple_expression
statement -> variable assignop expression
statement_list -> statement_list semi M statement   (58,(null))
M -> @
variable -> id   (36,l)
assignop -> :=   (57,(null))
factor -> id   (36,t)
term -> factor
simple_expression -> term
expression -> simple_expression
statement -> variable assignop expression
statement_list -> statement_list semi M statement   (58,(null))
M -> @
factor -> id   (36,i)
term -> factor
simple_expression -> term
expression -> simple_expression
expression_list -> expression
procedure_statement -> id ( expression_list )   (51,(null)) (50,(null)) (36,inc)
statement -> procedure_statement
statement_list -> statement_list semi M statement   (58,(null))
M -> @
factor -> id   (36,j)
term -> factor
simple_expression -> term
expression -> simple_expression
expression_list -> expression
procedure_statement -> id ( expression_list )   (51,(null)) (50,(null)) (36,dec)
statement -> procedure_statement
statement_list -> statement_list semi M statement   (58,(null))
optional_statements -> statement_list
compound_statement -> begin optional_statements end   (10,end) (3,begin)
statement -> compound_statement
N -> @
M -> @
procedure_statement -> id   (36,pass)
statement -> procedure_statement
statement -> if expression then M statement N else M statement   (9,else) (29,then) (15,if)
statement_list -> statement_list semi M statement   (58,(null))
M -> @
factor -> id   (36,i)
term -> factor
simple_expression -> term
relop -> <   (45,(null))
factor -> id   (36,rr)
term -> factor
simple_expression -> term
expression -> simple_expression relop simple_expression
factor -> ( expression )   (51,(null)) (50,(null))
term -> factor
simple_expression -> term
expression -> simple_expression
M -> @
factor -> id   (36,i)
term -> factor
simple_expression -> term
expression -> simple_expression
expression_list -> expression
factor -> id   (36,rr)
term -> factor
simple_expression -> term
expression -> simple_expression
expression_list -> expression_list , expression   (52,(null))
procedure_statement -> id ( expression_list )   (51,(null)) (50,(null)) (36,qsort)
statement -> procedure_statement
N -> @
M -> @
variable -> id   (36,tot)
assignop -> :=   (57,(null))
factor -> id   (36,i)
term -> factor
simple_expression -> term
addop -> +   (40,(null))
factor -> id   (36,j)
term -> factor
mulop -> *   (42,(null))
factor -> id   (36,k)
term -> term mulop factor
simple_expression -> simple_expression addop term
addop -> -   (41,(null))
factor -> id   (36,tot)
term -> factor
mulop -> /   (43,(null))
factor -> id   (36,m)
term -> term mulop factor
simple_expression -> simple_expression addop term
expression -> simple_expression
statement -> variable assignop expression
statement_list -> statement
M -> @
procedure_statement -> id   (36,pass)
statement -> procedure_statement
statement_list -> statement_list semi M statement   (58,(null))
optional_statements -> statement_list
compound_statement -> begin optional_statements end   (10,end) (3,begin)
statement -> compound_statement
statement -> if expression then M statement N else M statement   (9,else) (29,then) (15,if)
statement_list -> statement_list semi M statement   (58,(null))
M -> @
factor -> id   (36,ll)
term -> factor
simple_expression -> term
relop -> >   (46,(null))
factor -> id   (36,j)
term -> factor
simple_expression -> term
expression -> simple_expression relop simple_expression
factor -> ( expression )   (51,(null)) (50,(null))
term -> factor
simple_expression -> term
expression -> simple_expression
M -> @
factor -> id   (36,ll)
term -> factor
simple_expression -> term
expression -> simple_expression
expression_list -> expression
factor -> id   (36,j)
term -> factor
simple_expression -> term
expression -> simple_expression
expression_list -> expression_list , expression   (52,(null))
procedure_statement -> id ( expression_list )   (51,(null)) (50,(null)) (36,qsort)
statement -> procedure_statement
N -> @
M -> @
procedure_statement -> id   (36,pass)
statement -> procedure_statement
statement -> if expression then M statement N else M statement   (9,else) (29,then) (15,if)
statement_list -> statement_list semi M statement   (58,(null))
M -> @
procedure_statement -> id   (36,return)
statement -> procedure_statement
statement_list -> statement_list semi M statement   (58,(null))
optional_statements -> statement_list
compound_statement -> begin optional_statements end   (10,end) (3,begin)
subprogram_declaration -> ProgM subprogram_head declarations compound_statement
subprogram_declarations -> subprogram_declarations subprogram_declaration semi   (58,(null))
factor -> id   (36,t)
term -> factor
simple_expression -> term
expression -> simple_expression
expression_list -> expression
procedure_statement -> id ( expression_list )   (51,(null)) (50,(null)) (36,readln)
statement -> procedure_statement
statement_list -> statement
M -> @
variable -> id   (36,tot)
assignop -> :=   (57,(null))
factor -> id   (36,i)
term -> factor
simple_expression -> term
addop -> +   (40,(null))
factor -> id   (36,j)
term -> factor
mulop -> *   (42,(null))
factor -> id   (36,k)
term -> term mulop factor
simple_expression -> simple_expression addop term
addop -> -   (41,(null))
factor -> id   (36,tot)
term -> factor
mulop -> /   (43,(null))
factor -> id   (36,m)
term -> term mulop factor
simple_expression -> simple_expression addop term
expression -> simple_expression
statement -> variable assignop expression
statement_list -> statement_list semi M statement   (58,(null))
M -> @
factor -> id   (36,i)
term -> factor
simple_expression -> term
relop -> <   (45,(null))
factor -> id   (36,rr)
term -> factor
simple_expression -> term
expression -> simple_expression relop simple_expression
factor -> ( expression )   (51,(null)) (50,(null))
term -> factor
simple_expression -> term
expression -> simple_expression
M -> @
variable -> id   (36,tot)
assignop -> :=   (57,(null))
factor -> id   (36,i)
term -> factor
simple_expression -> term
addop -> +   (40,(null))
factor -> id   (36,j)
term -> factor
mulop -> *   (42,(null))
factor -> id   (36,k)
term -> term mulop factor
simple_expression -> simple_expression addop term
addop -> -   (41,(null))
factor -> id   (36,tot)
term -> factor
mulop -> /   (43,(null))
factor -> id   (36,m)
term -> term mulop factor
simple_expression -> simple_expression addop term
expression -> simple_expression
statement -> variable assignop expression
statement_list -> statement
optional_statements -> statement_list
compound_statement -> begin optional_statements end   (10,end) (3,begin)
statement -> compound_statement
N -> @
M -> @
variable -> id   (36,tot)
assignop -> :=   (57,(null))
factor -> id   (36,i)
term -> factor
simple_expression -> term
addop -> +   (40,(null))
factor -> id   (36,j)
term -> factor
simple_expression -> simple_expression addop term
expression -> simple_expression
factor -> ( expression )   (51,(null)) (50,(null))
term -> factor
mulop -> *   (42,(null))
factor -> id   (36,k)
term -> factor
simple_expression -> term
addop -> -   (41,(null))
factor -> id   (36,tot)
term -> factor
simple_expression -> simple_expression addop term
expression -> simple_expression
factor -> ( expression )   (51,(null)) (50,(null))
term -> term mulop factor
mulop -> /   (43,(null))
factor -> id   (36,m)
term -> term mulop factor
simple_expression -> term
expression -> simple_expression
statement -> variable assignop expression
statement_list -> statement
M -> @
procedure_statement -> id   (36,pass)
statement -> procedure_statement
statement_list -> statement_list semi M statement   (58,(null))
optional_statements -> statement_list
compound_statement -> begin optional_statements end   (10,end) (3,begin)
statement -> compound_statement
statement -> if expression then M statement N else M statement   (9,else) (29,then) (15,if)
statement_list -> statement_list semi M statement   (58,(null))
M -> @
M -> @
factor -> id   (36,j)
term -> factor
simple_expression -> term
relop -> <   (45,(null))
factor -> id   (36,t)
term -> factor
simple_expression -> term
expression -> simple_expression relop simple_expression
factor -> ( expression )   (51,(null)) (50,(null))
term -> factor
simple_expression -> term
expression -> simple_expression
M -> @
factor -> id   (36,n)
term -> factor
simple_expression -> term
expression -> simple_expression
expression_list -> expression
procedure_statement -> id ( expression_list )   (51,(null)) (50,(null)) (36,readln)
statement -> procedure_statement
statement_list -> statement
M -> @
M -> @
factor -> id   (36,i)
term -> factor
simple_expression -> term
relop -> <   (45,(null))
factor -> id   (36,n)
term -> factor
simple_expression -> term
expression -> simple_expression relop simple_expression
factor -> ( expression )   (51,(null)) (50,(null))
term -> factor
simple_expression -> term
expression -> simple_expression
M -> @
factor -> id   (36,l)
term -> factor
simple_expression -> term
expression -> simple_expression
expression_list -> expression
procedure_statement -> id ( expression_list )   (51,(null)) (50,(null)) (36,read)
statement -> procedure_statement
statement -> while M expression do M statement   (7,do) (34,while)
statement_list -> statement_list semi M statement   (58,(null))
M -> @
factor -> num   (37,123)
term -> factor
simple_expression -> term
expression -> simple_expression
expression_list -> expression
factor -> id   (36,n)
term -> factor
simple_expression -> term
expression -> simple_expression
expression_list -> expression_list , expression   (52,(null))
procedure_statement -> id ( expression_list )   (51,(null)) (50,(null)) (36,qsort)
statement -> procedure_statement
statement_list -> statement_list semi M statement   (58,(null))
M -> @
M -> @
factor -> id   (36,i)
term -> factor
simple_expression -> term
relop -> <   (45,(null))
factor -> id   (36,n)
term -> factor
simple_expression -> term
expression -> simple_expression relop simple_expression
factor -> ( expression )   (51,(null)) (50,(null))
term -> factor
simple_expression -> term
expression -> simple_expression
M -> @
factor -> id   (36,l)
term -> factor
simple_expression -> term
expression -> simple_expression
expression_list -> expression
procedure_statement -> id ( expression_list )   (51,(null)) (50,(null)) (36,writeln)
statement -> procedure_statement
statement -> while M expression do M statement   (7,do) (34,while)
statement_list -> statement_list semi M statement   (58,(null))
M -> @
factor -> id   (36,hha)
term -> factor
simple_expression -> term
expression -> simple_expression
expression_list -> expression
procedure_statement -> id ( expression_list )   (51,(null)) (50,(null)) (36,writeln)
statement -> procedure_statement
statement_list -> statement_list semi M statement   (58,(null))
M -> @
factor -> id   (36,i)
term -> factor
simple_expression -> term
relop -> <   (45,(null))
factor -> id   (36,rr)
term -> factor
simple_expression -> term
expression -> simple_expression relop simple_expression
factor -> ( expression )   (51,(null)) (50,(null))
term -> factor
simple_expression -> term
expression -> simple_expression
M -> @
variable -> id   (36,tot)
assignop -> :=   (57,(null))
factor -> id   (36,i)
term -> factor
simple_expression -> term
addop -> +   (40,(null))
factor -> id   (36,j)
term -> factor
mulop -> *   (42,(null))
factor -> id   (36,k)
term -> term mulop factor
simple_expression -> simple_expression addop term
addop -> -   (41,(null))
factor -> id   (36,tot)
term -> factor
mulop -> /   (43,(null))
factor -> id   (36,m)
term -> term mulop factor
simple_expression -> simple_expression addop term
expression -> simple_expression
statement -> variable assignop expression
statement_list -> statement
optional_statements -> statement_list
compound_statement -> begin optional_statements end   (10,end) (3,begin)
statement -> compound_statement
N -> @
M -> @
variable -> id   (36,tot)
assignop -> :=   (57,(null))
factor -> id   (36,i)
term -> factor
simple_expression -> term
addop -> +   (40,(null))
factor -> id   (36,j)
term -> factor
simple_expression -> simple_expression addop term
expression -> simple_expression
factor -> ( expression )   (51,(null)) (50,(null))
term -> factor
mulop -> *   (42,(null))
factor -> id   (36,k)
term -> factor
simple_expression -> term
addop -> -   (41,(null))
factor -> id   (36,tot)
term -> factor
simple_expression -> simple_expression addop term
expression -> simple_expression
factor -> ( expression )   (51,(null)) (50,(null))
term -> term mulop factor
mulop -> /   (43,(null))
factor -> id   (36,m)
term -> term mulop factor
simple_expression -> term
expression -> simple_expression
statement -> variable assignop expression
statement_list -> statement
M -> @
procedure_statement -> id   (36,pass)
statement -> procedure_statement
statement_list -> statement_list semi M statement   (58,(null))
optional_statements -> statement_list
compound_statement -> begin optional_statements end   (10,end) (3,begin)
statement -> compound_statement
statement -> if expression then M statement N else M statement   (9,else) (29,then) (15,if)
statement_list -> statement_list semi M statement   (58,(null))
optional_statements -> statement_list
compound_statement -> begin optional_statements end   (10,end) (3,begin)
statement -> compound_statement
statement -> while M expression do M statement   (7,do) (34,while)
statement_list -> statement_list semi M statement   (58,(null))
M -> @
factor -> id   (36,i)
term -> factor
simple_expression -> term
expression -> simple_expression
expression_list -> expression
procedure_statement -> id ( expression_list )   (51,(null)) (50,(null)) (36,inc)
statement -> procedure_statement
statement_list -> statement_list semi M statement   (58,(null))
optional_statements -> statement_list
compound_statement -> begin optional_statements end   (10,End) (3,Begin)
program -> prog id ( identifier_list ) semi declarations subprogram_declarations compound_statement   (58,(null)) (51,(null)) (50,(null)) (36,SSS) (25,Prog)
71
************Syntax Analyze Complete!************

--------------------------TableName:---------------------------
name = hha       width = 8       type = real     offset = 0
name = i         width = 8       type = real     offset = 8
name = j         width = 8       type = real     offset = 16
name = k         width = 8       type = real     offset = 24
name = p         width = 8       type = real     offset = 32
name = tot       width = 8       type = real     offset = 40
name = n         width = 8       type = real     offset = 48
name = t         width = 8       type = real     offset = 56
name = m         width = 8       type = real     offset = 64
name = rr        width = 8       type = real     offset = 72
name = record0   width = 4       type = record   offset = 80
name = last      width = 24      type = record0  offset = 84
name = she       width = 24      type = record0  offset = 108
name = l         width = 20024   type = array(5006,integer)      offset = 132
name = w         width = 20024   type = array(5006,integer)      offset = 20156
name = f         width = 20028   type = array(5007,integer)      offset = 40180
name = max       width = 4       type = function         offset = 60208
name = qsort     width = 4       type = procedure        offset = 60212
name = $0        width = 4       type = TempVar  offset = 60216
name = $1        width = 4       type = TempVar  offset = 60220
--------------------------TableName:max---------------------------
name = a         width = 4       type = integer  offset = 0
name = b         width = 4       type = integer  offset = 4
--------------------------TableName:qsort---------------------------
name = ll        width = 4       type = integer  offset = 0
name = rr        width = 4       type = integer  offset = 4
name = mid       width = 4       type = integer  offset = 8
name = t         width = 4       type = integer  offset = 12
name = i         width = 4       type = integer  offset = 16
name = j         width = 4       type = integer  offset = 20
name = mid2      width = 4       type = integer  offset = 24
name = l         width = 4       type = integer  offset = 28
name = tot       width = 4       type = integer  offset = 32
name = k         width = 4       type = integer  offset = 36
name = m         width = 4       type = integer  offset = 40
name = $0        width = 4       type = TempVar  offset = 44
name = $1        width = 4       type = TempVar  offset = 48
-------------------------------MidCode---------------------------------
0       if a > b goto 2
1       goto 5
2       param  a
3       call return 1
4       goto 6
5       call pass
6       param  b
7       call return 1
8       i := ll
9       j := rr
10      mid := l
11      if i < mid goto 13
12      goto 16
13      param  i
14      call inc 1
15      goto 11
16      if j > mid goto 18
17      goto 21
18      param  j
19      call dec 1
20      goto 16
21      if i < j goto 23
22      goto 31
23      t := l
24      l := l
25      l := t
26      param  i
27      call inc 1
28      param  j
29      call dec 1
30      goto 32
31      call pass
32      if i < rr goto 34
33      goto 38
34      param  i
35      param  rr
36      call qsort 2
37      goto 44
38      $0 := j * k
39      $0 := i + $0
40      $1 := tot / m
41      $0 := $0 - $1
42      tot := $0
43      call pass
44      if ll > j goto 46
45      goto 50
46      param  ll
47      param  j
48      call qsort 2
49      goto 51
50      call pass
51      call return
52      param  t
53      call readln 1
54      $0 := j * k
55      $0 := i + $0
56      $1 := tot / m
57      $0 := $0 - $1
58      tot := $0
59      if i < rr goto 61
60      goto 67
61      $0 := j * k
62      $0 := i + $0
63      $1 := tot / m
64      $0 := $0 - $1
65      tot := $0
66      goto 73
67      $0 := i + j
68      $1 := k - tot
69      $0 := $0 * $1
70      $0 := $0 / m
71      tot := $0
72      call pass
73      if j < t goto 75
74      goto 107
75      param  n
76      call readln 1
77      if i < n goto 79
78      goto 82
79      param  l
80      call read 1
81      goto 77
82      param  123
83      param  n
84      call qsort 2
85      if i < n goto 87
86      goto 90
87      param  l
88      call writeln 1
89      goto 85
90      param  hha
91      call writeln 1
92      if i < rr goto 94
93      goto 100
94      $0 := j * k
95      $0 := i + $0
96      $1 := tot / m
97      $0 := $0 - $1
98      tot := $0
99      goto 73
100     $0 := i + j
101     $1 := k - tot
102     $0 := $0 * $1
103     $0 := $0 / m
104     tot := $0
105     call pass
106     goto 73
107     param  i
108     call inc 1

Process returned 0 (0x0)   execution time : 1.450 s
Press any key to continue.
